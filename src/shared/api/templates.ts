import { apiClient } from './client'
import { API_CONFIG } from '@/shared/config/api'

export interface User {
  id: number
  name: string
  email: string
  phone: string
  position: string
  avatar?: string
  role: string
  department_id?: number
  is_active: boolean
  created_at: string
  updated_at: string
}

export interface Organization {
  id: number
  name: string
  inn?: string
  kpp?: string
  ogrn?: string
  legal_address?: string
  actual_address?: string
  phone?: string
  email?: string
  website?: string
  is_active: boolean
  created_at: string
  updated_at: string
}

export interface Template {
  id: number
  name: string
  content: string
  type: 'message' | 'email' | 'sms' | 'notification'
  category: 'greeting' | 'farewell' | 'support' | 'sales' | 'technical' | 'general'
  variables?: Record<string, string>
  language: 'ru' | 'en' | 'kk'
  is_active: boolean
  is_system: boolean
  usage_count: number
  created_at: string
  updated_at: string
  creator: User
  organization?: Organization
}

export interface CreateTemplateData {
  name: string
  content: string
  type: 'message' | 'email' | 'sms' | 'notification'
  category: 'greeting' | 'farewell' | 'support' | 'sales' | 'technical' | 'general'
  variables?: Record<string, string>
  language: 'ru' | 'en' | 'kk'
  is_active?: boolean
  organization_id?: number
}

export interface UpdateTemplateData {
  name?: string
  content?: string
  type?: 'message' | 'email' | 'sms' | 'notification'
  category?: 'greeting' | 'farewell' | 'support' | 'sales' | 'technical' | 'general'
  variables?: Record<string, string>
  language?: 'ru' | 'en' | 'kk'
  is_active?: boolean
}

export interface ProcessTemplateData {
  variables?: Record<string, string>
}

export interface ProcessedTemplate {
  template_id: number
  template_name: string
  original_content: string
  processed_content: string
  variables_used: Record<string, string>
}

export interface TemplateStats {
  total_templates: number
  active_templates: number
  system_templates: number
  user_templates: number
  by_type: Record<string, number>
  by_category: Record<string, number>
  most_used: Array<{
    id: number
    name: string
    usage_count: number
  }>
}

export interface TemplateOptions {
  types: string[]
  categories: string[]
  languages: string[]
}

export interface TemplatesListParams {
  per_page?: number
  search?: string
  page?: number
  type?: 'message' | 'email' | 'sms' | 'notification'
  category?: 'greeting' | 'farewell' | 'support' | 'sales' | 'technical' | 'general'
  language?: 'ru' | 'en' | 'kk'
  is_active?: boolean
  is_system?: boolean
  [key: string]: unknown
}

export interface PaginatedResponse<T> {
  data: T[]
  pagination: {
    current_page: number
    last_page: number
    per_page: number
    total: number
  }
}

export class TemplatesApi {
  async getTemplates(params?: TemplatesListParams): Promise<PaginatedResponse<Template>> {
    const response = await apiClient.get<PaginatedResponse<Template>>(API_CONFIG.ENDPOINTS.TEMPLATES, params)
    return response.data
  }

  async getTemplate(id: number): Promise<{ template: Template }> {
    const response = await apiClient.get<{ template: Template }>(`${API_CONFIG.ENDPOINTS.TEMPLATES}/${id}`)
    return response.data
  }

  async createTemplate(data: CreateTemplateData): Promise<{ template: Template }> {
    const response = await apiClient.post<{ template: Template }>(API_CONFIG.ENDPOINTS.TEMPLATES, data)
    return response.data
  }

  async updateTemplate(id: number, data: UpdateTemplateData): Promise<{ template: Template }> {
    const response = await apiClient.put<{ template: Template }>(`${API_CONFIG.ENDPOINTS.TEMPLATES}/${id}`, data)
    return response.data
  }

  async deleteTemplate(id: number): Promise<void> {
    await apiClient.delete(`${API_CONFIG.ENDPOINTS.TEMPLATES}/${id}`)
  }

  // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
  async getTemplatesByType(type: string, params?: Omit<TemplatesListParams, 'type'>): Promise<PaginatedResponse<Template>> {
    const response = await apiClient.get<PaginatedResponse<Template>>(`${API_CONFIG.ENDPOINTS.TEMPLATES}/type/${type}`, params)
    return response.data
  }

  async getTemplatesByCategory(category: string, params?: Omit<TemplatesListParams, 'category'>): Promise<PaginatedResponse<Template>> {
    const response = await apiClient.get<PaginatedResponse<Template>>(`${API_CONFIG.ENDPOINTS.TEMPLATES}/category/${category}`, params)
    return response.data
  }

  async processTemplate(id: number, data: ProcessTemplateData): Promise<{ template_id: number; template_name: string; original_content: string; processed_content: string; variables_used: Record<string, string> }> {
    const response = await apiClient.post<{ template_id: number; template_name: string; original_content: string; processed_content: string; variables_used: Record<string, string> }>(`${API_CONFIG.ENDPOINTS.TEMPLATES}/${id}/process`, data)
    return response.data
  }

  async getTemplateStats(): Promise<TemplateStats> {
    const response = await apiClient.get<TemplateStats>(`${API_CONFIG.ENDPOINTS.TEMPLATES}/stats`)
    return response.data
  }

  async getTemplateOptions(): Promise<TemplateOptions> {
    const response = await apiClient.get<TemplateOptions>(`${API_CONFIG.ENDPOINTS.TEMPLATES}/options`)
    return response.data
  }
}

export const templatesApi = new TemplatesApi()

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
export const TEMPLATE_TYPES = [
  { value: 'message', label: '–°–æ–æ–±—â–µ–Ω–∏–µ', description: '–°–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ', icon: 'pi pi-comment' },
  { value: 'email', label: 'Email', description: 'Email –ø–∏—Å—å–º–∞', icon: 'pi pi-envelope' },
  { value: 'sms', label: 'SMS', description: 'SMS —Å–æ–æ–±—â–µ–Ω–∏—è', icon: 'pi pi-mobile' },
  { value: 'notification', label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', description: '–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', icon: 'pi pi-bell' }
]

export const TEMPLATE_CATEGORIES = [
  { value: 'greeting', label: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', color: 'green' },
  { value: 'farewell', label: '–ü—Ä–æ—â–∞–Ω–∏–µ', description: '–ü—Ä–æ—â–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', color: 'blue' },
  { value: 'support', label: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', color: 'orange' },
  { value: 'sales', label: '–ü—Ä–æ–¥–∞–∂–∏', description: '–ü—Ä–æ–¥–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', color: 'purple' },
  { value: 'technical', label: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ', description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã', color: 'red' },
  { value: 'general', label: '–û–±—â–∏–µ', description: '–û–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è', color: 'gray' }
]

export const TEMPLATE_LANGUAGES = [
  { value: 'ru', label: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
  { value: 'en', label: 'English', flag: 'üá∫üá∏' },
  { value: 'kk', label: '“ö–∞–∑–∞“õ—à–∞', flag: 'üá∞üáø' }
]

export const TEMPLATE_VARIABLES = [
  { key: 'client_name', label: '–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞', description: '–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞' },
  { key: 'client_phone', label: '–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞', description: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞' },
  { key: 'client_email', label: 'Email –∫–ª–∏–µ–Ω—Ç–∞', description: 'Email –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞' },
  { key: 'service_type', label: '–¢–∏–ø —É—Å–ª—É–≥–∏', description: '–¢–∏–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ–π —É—Å–ª—É–≥–∏' },
  { key: 'contact_phone', label: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', description: '–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏' },
  { key: 'contact_email', label: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π email', description: 'Email –¥–ª—è —Å–≤—è–∑–∏' },
  { key: 'company_name', label: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏', description: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏' },
  { key: 'user_name', label: '–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', description: '–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞' },
  { key: 'user_position', label: '–î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', description: '–î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞' },
  { key: 'current_date', label: '–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞', description: '–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞' },
  { key: 'current_time', label: '–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è', description: '–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è' }
]
